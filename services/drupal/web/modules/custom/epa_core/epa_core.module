<?php

/**
 * @file
 * Contains epa_core.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\block_content\Entity\BlockContent;
use Drupal\node\NodeInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Used to hide auto generate descriptions and keywords for news releases.
 * - Hide path field.
 */
function epa_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_news_release_form':
    case 'node_news_release_edit_form':
      $node = $form_state->getFormObject()->getEntity();
      $node_langcode = $node->language()->getId();

      // UI element for generating default description.
      $description = $node->field_description->value;
      $default_description = t('EPA News Release: @title', ['@title' => $node->label()], ['langcode' => $node_langcode]);

      $form['generate_description'] = [
        '#type' => 'checkbox',
        '#title' => t('Generate automatic description'),
        '#default_value' => !$node->label() || $description == $default_description ? TRUE : FALSE,
        '#description' => t('Uncheck this to create a custom description below.'),
        '#weight' => isset($form['field_description']['#weight']) ? (int) $form['field_description']['#weight'] - 0.5 : 7.5,
      ];

      // UI element for generating default keywords.
      $keywords = [];
      foreach ($node->field_keywords as $keyword) {
        if ($keyword->entity) {
          $keywords[] = Unicode::strtolower($keyword->entity->label());
        }
      }
      sort($keywords);
      $keywords = implode(', ', $keywords);

      $default_keywords = [];
      foreach ($node->field_subjects as $subject) {
        if ($subject->entity) {
          $default_keywords[] = $subject->entity->label();
        }
      }
      sort($default_keywords);
      $default_keywords = implode(', ', $default_keywords);

      $form['generate_keywords'] = [
        '#type' => 'checkbox',
        '#title' => t('Generate automatic keywords'),
        '#default_value' => $keywords == $default_keywords,
        '#description' => t('Uncheck this to add custom keywords below.'),
        '#weight' => isset($form['field_keywords']['#weight']) ? (int) $form['field_keywords']['#weight'] - 0.5 : 8.5,
      ];

      // Use states to disable fields when checked.
      $form['field_description']['#states']['!enabled']['input[name="generate_description"]'] = ['checked' => TRUE];
      $form['field_keywords']['#states']['!enabled']['input[name="generate_keywords"]'] = ['checked' => TRUE];

      // Element validation.
      $form['field_description']['widget'][0]['value']['#required'] = FALSE;
      $form['field_description']['widget']['#element_validate'] = ['epa_core_new_release_description_validate'];
      //$form['field_description']['widget'][0]['#required'] = FALSE;

      // @todo element validation for keywords.

      break;
  }
}

/**
 * Element validation: new release description field.
 */
function epa_core_new_release_description_validate($element, FormStateInterface &$form_state, $form) {
  if (!$form_state->getErrors() && !empty($form_state->getValue('generate_description'))) {
    $node = $form_state->getFormObject()->getEntity();
    $node_langcode = $node->language()->getId();
    $title = $form_state->getValue('title');
    $description = t('EPA News Release: @title', ['@title' => $title[0]['value']], ['langcode' => $node_langcode]);
    $element[0]['value']['#value'] = $description->render();
    $form_state->setValueforElement($element, [['value' => $element[0]['value']['#value']]]);
  }

  epa_admin_required_fields_validate($element, $form_state);
}

/**
 * Element validation: required fields.
 */
function epa_admin_required_fields_validate($element, FormStateInterface $form_state) {
  if (empty($element[0]['value']['#value']) && $element[0]['value']['#value'] !== 0) {
    $form_state->setError($element, t('%field is required', ['%field' => $element['#title']]));
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * Move pseudo fields into relevant groups.
 */
function epa_core_field_group_build_pre_render_alter(&$element) {
  if (isset($element['generate_description'])) {
    $element['#group_children']['generate_description'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_description'] = $element['generate_description'];
    unset($element['generate_description']);
  }
  if (isset($element['generate_keywords'])) {
    $element['#group_children']['generate_keywords'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_keywords'] = $element['generate_keywords'];
    unset($element['generate_keywords']);
  }
}

/**
 * Implements hook_token_info().
 */
function epa_core_token_info() {
  $machine_name_token = [
    'name' => t('Machine name alias'),
    'description' => t('Machine name field.'),
  ];
  $default_revision_created_token = [
    'name' => t('Default revision creation date'),
    'description' => t('The published revision\'s creation date.'),
    'type' => 'date'
  ];
  $contact_us_link = [
    'name' => t('Contact Us Link'),
    'description' => t('The link to a Web Area\'s contact form.'),
  ];
  $footer_last_updated = [
    'name' => t('Last updated'),
    'description' => t('The current entity\'s latest updated date.'),
    'type' => 'date'
  ];
  $tokens['tokens'] = [
    'node' => [
      'machine-name-alias' => $machine_name_token,
      'default-revision-created' => $default_revision_created_token,
    ],
    'group' => [
      'machine-name-alias' => $machine_name_token,
    ],
    'current-page' => [
      'contact-us-link' => $contact_us_link,
      'footer-last-updated' => $footer_last_updated,
    ]
  ];
  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function epa_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];

  foreach ($tokens as $name => $original) {

    // custom date format handling
    if (stripos($name, 'default-revision-created') !== FALSE
      || stripos($name, 'footer-last-updated') !== FALSE ) {
      $parts = explode(':', $name);
      $name = $parts[0];
    }

    switch ($name) {
      case 'machine-name-alias':
        if (($type == 'node' && !empty($data['node'])) || ($type == 'group' && !empty($data['group']))) {
          $replacements[$original] = _epa_core_get_machine_name_alias($data[$type]);
        }
        break;
      case 'default-revision-created':
        if ($type == 'node') {
          $replacements[$original] = _epa_core_get_default_revision_created($data['node'], $parts[1], $parts[2]);
        }
        break;
      case 'contact-us-link':
        $node = \Drupal::routeMatch()->getParameter('node');
        if (isset($node)) {
          // load the group's contact form information
          $groups = \Drupal::service('epa_web_areas.web_areas_helper')
            ->getNodeReferencingGroups($node);
          foreach ($groups as $group) {
            $contact_form = $group->field_contact_us_form->target_id;
            $url = $contact_form ? Url::fromRoute('entity.node.canonical', ['node' => $contact_form]) : NULL;
            $replacements[$original] = $url ? Link::fromTextAndUrl(t('Contact Us'), $url)
              ->toString() : $replacements[$original];
          }
        }
        break;
      case 'footer-last-updated':
        $node = \Drupal::routeMatch()->getParameter('node');
        $bubbleable_metadata->addCacheableDependency(\Drupal::service('path.current')->getPath());
        if (isset($node)) {
          $replacements[$original] = t('Last updated on @date', ['@date' => _epa_core_get_default_revision_created($node, $parts[1], $parts[2])]);
        }
        else {
          $replacements[$original] = '';
        }
        break;
    }
  }
  return $replacements;
}

/**
 * Helper function to determine node machine name.
 */
function _epa_core_get_machine_name_alias($entity) {
  $alias_string = '';

  // Set alias_string to machine name.
  // If $alias_string is empty fallback to node's title.
  if (!$entity->get('field_machine_name')->isEmpty()) {
    $alias_string = $entity->get('field_machine_name')->value;
  }
  if (empty($alias_string)) {
    $alias_string = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
  }

  return $alias_string;
}

/**
 * Helper function to determine the published revision's creation date.
 */
function _epa_core_get_default_revision_created($node, $type = 'medium', $format = NULL) {
  $node = $node->isDefaultRevision() ? $node : Node::load($node->id());
  return \Drupal::service('date.formatter')->format($node->getRevisionCreationTime(), $type, $format);
}


/**
 * Implements hook_entity_revision_delete().
 * Invalidate cache tags for a node when its revision is deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function epa_core_entity_revision_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    Cache::invalidateTags(['node:' . $entity->id()]);
  }

  $t_args = [
    '@typeid' => $entity->getEntityTypeId() ? $entity->getEntityTypeId() : NULL,
    '@type' => $entity->bundle() ? $entity->bundle() : NULL,
    '@id' => $entity->id() ? $entity->id() : NULL,
    '@vid' => $entity->getRevisionId() ? $entity->getRevisionId() : NULL,
    '%label' => $entity->label() ? $entity->label() : NULL,
  ];
  \Drupal::logger('epa_core')
    ->notice(t('@typeid entity revision deleted. (Entity type: @type; Entity ID: @id; Revision ID: @vid; Entity label: %label)', $t_args));
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function epa_core_entity_delete(EntityInterface $entity) {
  $t_args = [
    '@typeid' => $entity->getEntityTypeId() ? $entity->getEntityTypeId() : NULL,
    '@type' => $entity->bundle() ? $entity->bundle() : NULL,
    '@id' => $entity->id() ? $entity->id() : NULL,
    '%label' => $entity->label() ? $entity->label() : NULL,
  ];
  \Drupal::logger('epa_core')
    ->notice(t('@typeid entity deleted. (Entity type: @type; Entity ID: @id; Entity label: %label)', $t_args));
}

/**
 * Implements hook_form_alter().
 */
function epa_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'media_library_add_form_upload' && isset($form["media"][0]["fields"]["name"]["widget"][0]["value"]["#default_value"])) {
    $form["media"][0]["fields"]["name"]["widget"][0]["value"]["#default_value"] = '';
    $form["media"][0]["fields"]["name"]["widget"][0]["value"]["#description"] = t('Please give this item a descriptive title.');
  }
}

/**
 * Implements hook_entity_presave().
 */
function epa_core_node_presave(NodeInterface $node) {
  if ($node->bundle() == 'public_notice') {
    // Automatically populate notice's field_geographic_locations field with
    // data from field_location_of_prop_action to avoid making users enter it
    // twice.
    $geo_location_terms = [];
    if (!$node->field_locations_of_prop_actions->isEmpty()) {
      foreach ($node->field_locations_of_prop_actions as $item) {
        if (is_object($item->entity)) {
          $location = $item->entity;
          if (!$location->field_state_or_territory->isEmpty()) {
            $geo_location_terms[] = [
              'target_id' => $location->field_state_or_territory->target_id,
            ];
          }
        }
      }
    }
    $node->set('field_geographic_locations', $geo_location_terms);

    // Set computed date based on extension and due date. If neither are set, clear it.
    // If only extension date is set, do nothing.
    $due_date = $node->field_comments_due_date->value;
    $extension_date = $node->field_comments_extension_date->value;

    if ($due_date) {
      if ($extension_date) {
        $node->set('field_computed_comments_due_date', $extension_date);
      }
      else {
        $node->set('field_computed_comments_due_date', $due_date);
      }
    }
    elseif (!$extension_date) {
      $node->set('field_computed_comments_due_date', NULL);
    }

    // If computed date was set, use it. Otherwise set a date 90 days out.
    if($computed_date = $node->field_computed_comments_due_date->value) {
      $node->set('field_notice_sort_date', $computed_date);
    } else {
      $date = new DrupalDateTime();
      $date->add(new DateInterval("P90D"));

      // Set field value
      $node->set('field_notice_sort_date', $date->format('Y-m-d'));
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function epa_core_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $plugin_id = $context['widget']->getPluginId();
  // If the field is a datetime or daterange field, then add a note to the
  // field's description indicating that times must be entered according to the
  // user's configured timezone. Since the "created" field suppresses the
  // container-level description, add it to the field directly in that case.
  if (strpos($plugin_id, 'datetime_') !== FALSE || strpos($plugin_id, 'daterange') !== FALSE) {
    $field_name = $context['items']->getName();
    if ($field_name == 'created') {
      _epa_core_augment_datetime_description($element['value']['#description']);
    }
    else {
      if (empty($element['#description'])) {
        $element['#description'] = '';
      }
      _epa_core_augment_datetime_description($element['#description']);
    }
  }
}

/**
 * Helper function to generate user's timezone description for datetime fields.
 */
function _epa_core_augment_datetime_description(&$field_description) {
  $date = new DrupalDateTime();
  $timezone = $date->format('T');
  $timezone_description = t('<strong>Note:</strong> Specify time in @timezone', ['@timezone' => $timezone])->render();
  if (!empty($field_description)) {
    if ($field_description instanceof FieldFilteredMarkup) {
      $field_description = $field_description->__toString();
    }
    elseif ($field_description instanceof TranslatableMarkup) {
      $field_description = $field_description->render();
    }
    $field_description .= '<br/>' . $timezone_description;
  }
  else {
    $field_description = $timezone_description;
  }
}
