<?php

/**
 * @file
 * Contains epa_core.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Used to hide auto generate descriptions and keywords for news releases.
 * - Hide path field.
 */
function epa_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_news_release_form':
    case 'node_news_release_edit_form':
      $node = $form_state->getFormObject()->getEntity();
      $node_langcode = $node->language()->getId();

      // UI element for generating default description.
      $description = $node->field_description->value;
      $default_description = t('EPA News Release: @title', ['@title' => $node->label()], ['langcode' => $node_langcode]);

      $form['generate_description'] = [
        '#type' => 'checkbox',
        '#title' => t('Generate automatic description'),
        '#default_value' => !$node->label() || $description == $default_description ? TRUE : FALSE,
        '#description' => t('Uncheck this to create a custom description below.'),
        '#weight' => isset($form['field_description']['#weight']) ? (int) $form['field_description']['#weight'] - 0.5 : 7.5,
      ];

      // UI element for generating default keywords.
      $keywords = [];
      foreach ($node->field_keywords as $keyword) {
        if ($keyword->entity) {
          $keywords[] = Unicode::strtolower($keyword->entity->label());
        }
      }
      sort($keywords);
      $keywords = implode(', ', $keywords);

      $default_keywords = [];
      foreach ($node->field_subjects as $subject) {
        if ($subject->entity) {
          $default_keywords[] = $subject->entity->label();
        }
      }
      sort($default_keywords);
      $default_keywords = implode(', ', $default_keywords);

      $form['generate_keywords'] = [
        '#type' => 'checkbox',
        '#title' => t('Generate automatic keywords'),
        '#default_value' => $keywords == $default_keywords,
        '#description' => t('Uncheck this to add custom keywords below.'),
        '#weight' => isset($form['field_keywords']['#weight']) ? (int) $form['field_keywords']['#weight'] - 0.5 : 8.5,
      ];

      // Use states to disable fields when checked.
      $form['field_description']['#states']['!enabled']['input[name="generate_description"]'] = ['checked' => TRUE];
      $form['field_keywords']['#states']['!enabled']['input[name="generate_keywords"]'] = ['checked' => TRUE];

      // Element validation.
      $form['field_description']['widget'][0]['value']['#required'] = FALSE;
      $form['field_description']['widget']['#element_validate'] = ['epa_core_new_release_description_validate'];
      //$form['field_description']['widget'][0]['#required'] = FALSE;

      // @todo element validation for keywords.

      break;
  }
}

/**
 * Element validation: new release description field.
 */
function epa_core_new_release_description_validate($element, FormStateInterface &$form_state, $form) {
  if (!$form_state->getErrors() && !empty($form_state->getValue('generate_description'))) {
    $node = $form_state->getFormObject()->getEntity();
    $node_langcode = $node->language()->getId();
    $title = $form_state->getValue('title');
    $description = t('EPA News Release: @title', ['@title' => $title[0]['value']], ['langcode' => $node_langcode]);
    $element[0]['value']['#value'] = $description->render();
    $form_state->setValueforElement($element, [['value' => $element[0]['value']['#value']]]);
  }

  epa_admin_required_fields_validate($element, $form_state);
}

/**
 * Element validation: required fields.
 */
function epa_admin_required_fields_validate($element, FormStateInterface $form_state) {
  if (empty($element[0]['value']['#value']) && $element[0]['value']['#value'] !== 0) {
    $form_state->setError($element, t('%field is required', ['%field' => $element['#title']]));
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * Move pseudo fields into relevant groups.
 */
function epa_core_field_group_build_pre_render_alter(&$element) {
  if (isset($element['generate_description'])) {
    $element['#group_children']['generate_description'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_description'] = $element['generate_description'];
    unset($element['generate_description']);
  }
  if (isset($element['generate_keywords'])) {
    $element['#group_children']['generate_keywords'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_keywords'] = $element['generate_keywords'];
    unset($element['generate_keywords']);
  }
}

/**
 * Implements hook_token_info().
 */
function epa_core_token_info() {
  $machine_name_token = [
    'name' => t('Machine name alias'),
    'description' => t('Machine name field.'),
  ];
  $default_revision_created_token = [
    'name' => t('Default revision creation date'),
    'description' => t('The published revision\'s creation date.'),
    'type' => 'date'
  ];
  $contact_us_link = [
    'name' => t('Contact Us Link'),
    'description' => t('The link to a Web Area\'s contact form.'),
  ];
  $footer_last_updated = [
    'name' => t('Last updated'),
    'description' => t('The current entity\'s latest updated date.'),
    'type' => 'date'
  ];
  $tokens['tokens'] = [
    'node' => [
      'machine-name-alias' => $machine_name_token,
      'default-revision-created' => $default_revision_created_token,
    ],
    'group' => [
      'machine-name-alias' => $machine_name_token,
    ],
    'current-page' => [
      'contact-us-link' => $contact_us_link,
      'footer-last-updated' => $footer_last_updated,
    ]
  ];
  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function epa_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];

  foreach ($tokens as $name => $original) {

    // custom date format handling
    if (stripos($name, 'default-revision-created') !== FALSE
      || stripos($name, 'footer-last-updated') !== FALSE ) {
      $parts = explode(':', $name);
      $name = $parts[0];
    }

    switch ($name) {
      case 'machine-name-alias':
        if (($type == 'node' && !empty($data['node'])) || ($type == 'group' && !empty($data['group']))) {
          $replacements[$original] = _epa_core_get_machine_name_alias($data[$type]);
        }
        break;
      case 'default-revision-created':
        if ($type == 'node') {
          $replacements[$original] = _epa_core_get_default_revision_created($data['node'], $parts[1], $parts[2]);
        }
        break;
      case 'contact-us-link':
        $node = \Drupal::routeMatch()->getParameter('node');
        if (isset($node)) {
          // load the group's contact form information
          $groups = \Drupal::service('epa_web_areas.web_areas_helper')
            ->getNodeReferencingGroups($node);
          foreach ($groups as $group) {
            $contact_form = $group->field_contact_us_form->target_id;
            $url = $contact_form ? Url::fromRoute('entity.node.canonical', ['node' => $contact_form]) : NULL;
            $replacements[$original] = $url ? Link::fromTextAndUrl(t('Contact Us'), $url)
              ->toString() : $replacements[$original];
          }
        }
        break;
      case 'footer-last-updated':
        $node = \Drupal::routeMatch()->getParameter('node');
        $bubbleable_metadata->addCacheableDependency(\Drupal::service('path.current')->getPath());
        if (isset($node)) {
          $replacements[$original] = t('Last updated on @date', ['@date' => _epa_core_get_default_revision_created($node, $parts[1], $parts[2])]);
        }
        else {
          $replacements[$original] = '';
        }
        break;
    }
  }
  return $replacements;
}

/**
 * Helper function to determine node machine name.
 */
function _epa_core_get_machine_name_alias($entity) {
  $alias_string = '';

  // Set alias_string to machine name.
  // If $alias_string is empty fallback to node's title.
  if (!$entity->get('field_machine_name')->isEmpty()) {
    $alias_string = $entity->get('field_machine_name')->value;
  }
  if (empty($alias_string)) {
    $alias_string = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
  }

  return $alias_string;
}

/**
 * Helper function to determine the published revision's creation date.
 */
function _epa_core_get_default_revision_created($node, $type = 'medium', $format = NULL) {
  $node = $node->isDefaultRevision() ? $node : Node::load($node->id());
  return \Drupal::service('date.formatter')->format($node->getRevisionCreationTime(), $type, $format);
}


/**
 * Implements hook_entity_revision_delete().
 * Invalidate cache tags for a node when its revision is deleted.
 */
function epa_core_entity_revision_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    Cache::invalidateTags(['node:' . $entity->id()]);
  }
}

/**
 * Implements hook_file_download.
 */
function epa_core_file_download($uri) {
  if (\Drupal::currentUser()->isAnonymous()) {
    $scheme = file_uri_scheme($uri);
    $entity_type_manager = \Drupal::entityTypeManager();

    if (\Drupal::service('stream_wrapper_manager')->isValidScheme($scheme) && file_exists($uri)) {
      // We should only get one result.
      $files = $entity_type_manager->getStorage('file')->loadByProperties(['uri' => $uri]);
      $file = reset($files);
      $media = $entity_type_manager->getStorage('media')->load($file->id());

      // Throw 404 if file accessibility is true else serve the file.
      if (isset($media) && $media->hasField('field_limit_file_accessibility') && !empty($media->field_limit_file_accessibility->value)) {
        throw new NotFoundHttpException();
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function epa_web_areas_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->hasField('field_hublinks') && $entity->id()) {
    $groups = \Drupal::service('epa_web_areas.web_areas_helper')
      ->getNodeReferencingGroups($entity);

    foreach ($groups as $group) {
      $group_hublink = ['target_id' => $group->id()];
      $hublinks = $entity->field_hublinks->getValue();

      if (FALSE === array_search($group_hublink, $hublinks)) {
        array_unshift($hublinks, $group_hublink);
      }
    }

    $entity->field_hublinks->setValue($hublinks);
  }
}
