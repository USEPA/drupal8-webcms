<?php

/**
 * @file
 * Contains epa_forms.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupContentType;
use Drupal\webform\Entity\Webform;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function epa_forms_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'webform' && $entity->get('webform')->isEmpty()) {
    $title = $entity->label();
    $machine_name = $entity->get('field_machine_name')->getValue();
    $label = !empty($machine_name) ? $machine_name : $title;
    $id = preg_replace('@[^a-z0-9-]+@', '_', strtolower($label));
    $id = substr($id, 0, 24);
    $id .= '_' . $entity->id();

    $settings = Webform::getDefaultSettings();
    $third_party_settings['epa_forms'] = ['nid' => $entity->id()];

    $webform = Webform::create([
      'id' => $id,
      'title' => $title,
      'settings' => $settings,
      'third_party_settings' => $third_party_settings,
    ]);
    $webform->save();

    $entity->get('webform')->target_id = $id;
    $entity->save();

    \Drupal::messenger()->addStatus(t('Webform %label has been created.', ['%label' => $webform->toLink()->toString()]));
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function epa_forms_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'webform' && !$entity->get('webform')->isEmpty()) {
    $webform = $entity->get('webform')->entity;
    $webform->delete();
    \Drupal::messenger()->addStatus(t('The Webform %label has been deleted.', ['%label' => $webform->label()]));
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_forms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_webform_form':
      $form['webform']['#access'] = FALSE;
      break;

    case 'node_webform_edit_form':
      $node = $form_state->getFormObject()->getEntity();
      if (!empty($node) && !$node->get('webform')->isEmpty()) {
        $form['webform']['widget'][0]['target_id']['#access'] = FALSE;
        $form['webform']['widget'][0]['settings']['#open'] = FALSE;

        $webform = $node->get('webform')->entity;
        $weight = $form['webform']['#weight'] - .5;

        $url = $webform->toUrl('edit-form');
        $markup = t('<a href=":url" target="_blank">@title</a>',
          [
            '@title' => $webform->label(),
            ':url' => $url->toString(),
          ]
        );
        $form['webform_link'] = [
          '#type' => 'item',
          '#title' => $form['webform']['widget']['#title'],
          '#markup' => $markup,
          '#weight' => $weight,
        ];
      }
      break;

    case 'node_webform_delete_form':
      $form['webform_description'] = [
        '#markup' => t('This action will also remove any associated webform entity and <strong>delete its submissions</strong>.'),
      ];
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Infer access through content type referencing webform.
 */
function epa_forms_webform_access(EntityInterface $entity, $operation, AccountInterface $account) {
  switch ($operation) {
    // Always deny access to delete or duplicate.
    case 'duplicate':
    case 'delete':
      return AccessResult::forbidden();
      break;

    // Infer access from node access when viewing or updating.
    case 'view':
    case 'update':
      $node = _epa_forms_get_webform_referencing_node($entity);
      return empty($node) ? AccessResult::neutral() : $node->access($operation, $account, TRUE);
      break;

    // Custom permissions are provided to view submissions.
    // See epa_forms.group.permissions.yml.
    case 'submission_page':
    case 'submission_view_any':
      $node = _epa_forms_get_webform_referencing_node($entity);
      if (empty($node)) {
        return;
      }
      $groups = _epa_forms_get_webform_referencing_groups($node);
      if (!empty($groups)) {
        foreach ($groups as $group) {
          if ($group->hasPermission("view group webform submissions", $account)) {
            return AccessResult::allowed();
          }
        }
      }
      break;
  }

  return AccessResult::neutral();
}

/**
 * Helper function to grab referencing node from webform.
 */
function _epa_forms_get_webform_referencing_node(EntityInterface $entity) {
  // Get node from webform.
  $nid = $entity->getThirdPartySetting('epa_forms', 'nid');
  if (empty($nid)) {
    return;
  }
  return \Drupal::entityTypeManager()->getStorage('node')->load($nid);
}

/**
 * Helper function to grab groups associated with node.
 */
function _epa_forms_get_webform_referencing_groups($node) {
  $plugin_id = 'group_node:' . $node->bundle();

  // Only act if there are group content types for this node type.
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return;
  }

  // Load all the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $node->id(),
    ]);

  // If the node does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return;
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}
