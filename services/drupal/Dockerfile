FROM forumone/drupal8:8.0 AS memcached-ext

# Set working directory to /tmp
WORKDIR /tmp

# First, install compile-time dependencies
RUN apk add --no-cache $PHPIZE_DEPS libmemcached-dev zlib-dev

# Next, install the prequisite igbinary extension
RUN pecl install igbinary

# Finally, build and install memcached. We have to do this instead of the
# traditional pecl install method because we pass custom flags to memcached's
# ./configure script, which does not appear to be supported by the pecl command.
RUN set -ex \
  && PECL_MEMCACHED_VERSION=3.2.0 \
  && cd /tmp \
  && pecl download memcached-$PECL_MEMCACHED_VERSION \
  && tar xzf memcached-$PECL_MEMCACHED_VERSION.tgz \
  && cd memcached-$PECL_MEMCACHED_VERSION \
  && phpize \
  && ./configure --enable-memcached-igbinary \
  && make \
  && make install

FROM forumone/drupal8:8.0 AS base

# Download and install the New Relic APM extension. Note that, unlike in the docs, we do
# not configure the extension here. That must happen at runtime since the license keys
# and application names are environment-dependent.
RUN set -ex \
  && NEW_RELIC_AGENT_VERSION=9.21.0.311 \
  && curl -L https://download.newrelic.com/php_agent/archive/$NEW_RELIC_AGENT_VERSION/newrelic-php5-$NEW_RELIC_AGENT_VERSION-linux-musl.tar.gz | tar -C /tmp -zx \
  && export NR_INSTALL_USE_CP_NOT_LN=1 NR_INSTALL_SILENT=1 \
  && /tmp/newrelic-php5-$NEW_RELIC_AGENT_VERSION-linux-musl/newrelic-install install \
  && rm -rf /tmp/newrelic-php5-* /tmp/nrinstall*

# Copy and enable the memcached extension (and its dependency, igbinary)
COPY --from=memcached-ext \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/igbinary.so \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/memcached.so \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/
RUN docker-php-ext-enable igbinary && docker-php-ext-enable memcached

# APK packages needed by this image
RUN f1-ext-install pecl:apcu builtin:sockets \
  && apk add --no-cache \
  # Needed by the memcached extension
  libmemcached \
  # GNU wget to override BusyBox
  wget

RUN set -ex \
  # This construct echoes the configuration lines to the console as well as outputting them
  # to the ini file that PHP-FPM reads.
  && { \
    echo 'memory_limit=512M'; \
    echo 'upload_max_filesize=1G'; \
    echo 'post_max_size=1G'; \
  } | tee /usr/local/etc/php/php-fpm-fcgi.ini \
  # Enable special PHP-FPM status pages:
  && sed -i \
    # 1. The 'ping' endpoint responds with 'pong' (useful for health checks)
    -e 's/^;\(ping\.path =\)/\1/' \
    # 2. The 'status' endpoint response with metrics related to this FPM worker pool
    -e 's/^;\(pm\.status_path =\)/\1/' \
    /usr/local/etc/php-fpm.d/www.conf

# Set the php-fpm log format. This was largely reverse-engineered from fpm_log.c in the
# PHP sources. Notes on the available log options:
# * %C - CPU percentage
#   * %{user}C - user CPU percentage
#   * %{system}C - system CPU percentage (i.e., time spent in system calls)
#   * %{total}C - total CPU (same as %C by itself)
# * %d - request duration (in seconds)
#   * %{<format>}d - duration in <format> (seconds, miliseconds [sic], microseconds)
# * %{VAR}e - read $VAR from environment
# * %f - script filename
# * %m - HTTP method
# * %M - request memory (in bytes)
#   * %{<format>}M - memory in <format> (bytes, kilobytes, megabytes)
# * %q - request query string
# * %Q - '?' or '', depending on whether or not query string is present
# * %r - request URI (FastCGI's SCRIPT_NAME/DOCUMENT_NAME)
# * %R - remote IP
# * %t %T - timestamp
# * %u - user (HTTP basic auth user)
#
# cf. https://github.com/php/php-src/blob/php-7.3.20/sapi/fpm/fpm/fpm_log.c
RUN set -ex \
  && { \
    # Breakdown of this log format:
    # (1)                          (2)        (3) (4)        (5)                                (6)                  (7)         (8)
    # [27/Jul/2020:16:58:08 +0000] 172.18.0.7 GET /index.php /admin/dashboard?foo=hello%20world mem(bytes): 31457280 cpu%: 72.78 dur(secs): 0.137
    # 1. Request timestamp
    # 2. Remote IP
    # 3. HTTP method
    # 4. FastCGI script
    # 5. "actual" FastCGI request
    # 6. Memory used (in bytes)
    # 7. CPU percentage
    # 8. Request duration
    echo 'access.format="[%T] %R %m %r %{REQUEST_URI}e mem(bytes): %M cpu%%: %{total}C dur(secs): %d"'; \
  } | tee /usr/local/etc/php-fpm.d/zz-log.conf

# Install Composer dependencies
FROM composer:2 AS deps

WORKDIR /app

# Create a stub 'web' folder instead of copying to maximize cache usage
RUN mkdir web

# Copy "base" Composer scripts and patches first - we assume these change less frequently
# than composer.json and friends
COPY ./scripts scripts
COPY ./patches patches

# Copy Composer manifest files
COPY composer.json composer.lock composer.patches.json auth.json ./

# Perform a production-quality Composer build
RUN composer install \
  --ignore-platform-reqs \
  --no-dev \
  --optimize-autoloader

# Remove any Composer authentication file if present.
RUN rm auth.json

# Build Gesso, the WebCMS' theme
FROM forumone/gesso:3-node-v12-php-8.0 AS gesso

WORKDIR /app

# Install base npm dependencies (npm ci = npm clean-install)
COPY web/themes/epa_theme/package*.json ./
RUN npm ci

# Copy theme source files and perform a build
COPY web/themes/epa_theme ./
RUN set -ex \
  # Build theme
  && npx gulp build \
  # Remove node_modules - these are only needed for the build, so we save some size in the
  # images by removing theme here.
  && rm -rf node_modules

# Create the final Drupal 8 image - build this by specifying "docker build --target drupal"
FROM base AS drupal

# Copy Composer-installed packages
COPY --from=deps /app/web web
COPY --from=deps /app/vendor vendor
COPY --from=deps /app/scripts scripts

# Copy composer.json files
COPY --from=deps /app/composer.json /app/composer.lock /app/composer.patches.json ./

# Copy the built theme
COPY --from=gesso /app web/themes/epa_theme

# Copy the environment loader
COPY load.environment.php ./

# Copies performed here won't overwrite the build artifacts from previous
# stages: Docker merges the directories' contents intelligently.
COPY web web
COPY config config
COPY drush drush

# Copy additional certificates for use by Drupal and bundle them into the system
# certificates
COPY tls /usr/share/ca-certificates/extra
RUN \
  for cert in $(cd /usr/share/ca-certificates; echo extra/*); do \
    echo "$cert" >> /etc/ca-certificates.conf; \
  done \
  && update-ca-certificates \
  # Append AWS' RDS certificate bundle to the bundle we verify in settings.php
  && curl -fsSL https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem >> /etc/ssl/cert.pem

# Add the entrypoint logic to configure the New Relic extension
COPY scripts/ecs/drupal-entrypoint.sh /webcms-entrypoint
RUN chmod +x /webcms-entrypoint

ENTRYPOINT ["/webcms-entrypoint"]
CMD [ "php-fpm" ]

# Add build metadata to the image. We expose two optional build args:
# * GIT_TAG, the named Git tag being built.
# * GIT_COMMIT, the Git commit being built.
#
# These args are converted to environment variables that can be read by, e.g.,
# settings.php to display to users the current running code.
ARG GIT_TAG=""
ARG GIT_COMMIT=""

ENV GIT_TAG=${GIT_TAG} GIT_COMMIT=${GIT_COMMIT}

# Build an nginx container that has the same view into the Drupal filesystem
# as well as its configuration file.
FROM nginx:mainline-alpine AS nginx

# Copy the Drupal filesystem into this image
COPY --from=drupal /var/www/html /var/www/html

# Copy nginx configuration
COPY status.conf *.map /etc/nginx/conf.d/

# Copy configuration templates
COPY default.conf /etc/nginx/templates/default.conf.template

# Build a drush-specific image: this image includes command-line utilities such as mysql
# and ssh that are inappropriate for a server container image.
FROM forumone/drupal8-cli:8.0 AS drush

# Download and install New Relic
RUN set -ex \
  && NEW_RELIC_AGENT_VERSION=9.21.0.311 \
  && curl -L https://download.newrelic.com/php_agent/archive/$NEW_RELIC_AGENT_VERSION/newrelic-php5-$NEW_RELIC_AGENT_VERSION-linux-musl.tar.gz | tar -C /tmp -zx \
  && export NR_INSTALL_USE_CP_NOT_LN=1 NR_INSTALL_SILENT=1 \
  && /tmp/newrelic-php5-$NEW_RELIC_AGENT_VERSION-linux-musl/newrelic-install install \
  && rm -rf /tmp/newrelic-php5-* /tmp/nrinstall*

# Copy and enable the memcached extension (and its dependency, igbinary)
COPY --from=memcached-ext \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/igbinary.so \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/memcached.so \
  /usr/local/lib/php/extensions/no-debug-non-zts-20200930/
RUN docker-php-ext-enable igbinary && docker-php-ext-enable memcached

# APK packages needed by this image
RUN f1-ext-install pecl:apcu builtin:sockets \
  && apk add --no-cache \
  # Needed by the memcached extension
  libmemcached  \
  # See ENTRYPOINT below
  tini

# Allow unlimited memory usage when running Drush tasks (ECS will constrain the memory
# instead of PHP)
RUN set -ex \
  && { \
    echo 'memory_limit=-1'; \
  } | tee /usr/local/etc/php/php-cli.ini

# Same as nginx: copy the built Drupal filesystem
COPY --from=drupal /var/www/html /var/www/html

# Copy additional certificates for use by Drupal and bundle them into the system
# certificates
COPY tls /usr/share/ca-certificates/extra
RUN \
  for cert in $(cd /usr/share/ca-certificates; echo extra/*); do \
    echo "$cert" >> /etc/ca-certificates.conf; \
  done \
  && update-ca-certificates \
  && curl -fsSL https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem >> /etc/ssl/cert.pem

# Copy the migration script into /usr/local/bin as a command
COPY scripts/ecs/drush-migrate.sh /usr/local/bin/drush-migrate
RUN chmod +x /usr/local/bin/drush-migrate

# Add the entrypoint logic to configure the New Relic extension
COPY scripts/ecs/drupal-entrypoint.sh /webcms-entrypoint
RUN chmod +x /webcms-entrypoint

# Replace the default crontab with one that runs Drush every five minutes. By
# default, cron is not run (since there is no systemd equivalent in containers),
# but we use this in the Drush ECS service definition.
RUN echo '*/5 * * * * drush cron --uri="${WEBCMS_SITE_URL}" 2>&1' | crontab -

# Wrap the entrypoint script with tini to allow graceful signal handling
ENTRYPOINT ["tini", "--", "/webcms-entrypoint"]

# Add build metadata to the image. See the comments for these ARG instructions
# in the Drupal stage for more details.
ARG GIT_TAG=""
ARG GIT_COMMIT=""

ENV GIT_TAG=${GIT_TAG} GIT_COMMIT=${GIT_COMMIT}
