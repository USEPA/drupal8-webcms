# SSL certificate for the ALB - used by the HTTPS listener
resource "aws_acm_certificate" "frontend" {
  # Only provision the certificate for the domain on which we're listening
  domain_name = var.dns-subdomain == null ? var.dns-root-domain : "${var.dns-subdomain}.${var.dns-root-domain}"

  # DNS validation is used below
  validation_method = "DNS"

  tags = {
    Application = "WebCMS"
  }

  # Always ensure we have a certificate
  lifecycle {
    create_before_destroy = true
  }
}

# Associate validation DNS with this certificate
# See:
# * dns.tf
# * https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html
resource "aws_acm_certificate_validation" "frontend" {
  certificate_arn         = aws_acm_certificate.frontend.arn
  validation_record_fqdns = [aws_route53_record.frontend_validation.fqdn]
}

# Create the user-facing load balancer for the ECS cluster
resource "aws_lb" "frontend" {
  name               = "webcms-frontend"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.load_balancer.id]
  subnets            = aws_subnet.public.*.id

  tags = {
    Application = "WebCMS"
  }
}

# Target group for Drupal container tasks
resource "aws_lb_target_group" "drupal_target_group" {
  name = "webcms-drupal-tg"

  port        = 80
  protocol    = "HTTP"
  target_type = "ip"
  vpc_id      = aws_vpc.main.id
}

# Listener for HTTP requests. We unconditionally upgrade all HTTP requests to HTTPS because
# it's just good request hygiene.
resource "aws_lb_listener" "frontend_http" {
  load_balancer_arn = aws_lb.frontend.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = 443
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

# Send all HTTPS requests to Drupal
resource "aws_lb_listener" "frontend_https" {
  load_balancer_arn = aws_lb.frontend.arn
  port              = 443
  protocol          = "HTTPS"
  certificate_arn   = aws_acm_certificate.frontend.arn

  # The default action here is to reject traffic - this prevents requests bypassing
  # the configured domain name and trying to visit the autogenerated ALB address.
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      status_code  = 404
      message_body = "Not found"
    }
  }
}

# This is the rule that allows traffic through if it matches the configured domain
resource "aws_lb_listener_rule" "frontend_https" {
  listener_arn = aws_lb_listener.frontend_https.arn

  action {
    type = "forward"

    target_group_arn = aws_lb_target_group.drupal_target_group.arn
  }

  condition {
    host_header {
      values = var.dns-subdomain == null ? [var.dns-root-domain] : ["${var.dns-subdomain}.${var.dns-root-domain}"]
    }
  }
}
